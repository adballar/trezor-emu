/*
	This file describes Protocol buffers messages for bitcoin hardware wallet devices.
	
	Author: slush <info@bitcoin.cz>
*/

// Specifies algorithm used for generating private/public keys from the seed.
enum Algorithm {
    BIP32 = 0;
    ELECTRUM = 1;
}

// Specifies which script will be used for given transaction output. 
enum ScriptType {
    PAYTOADDRESS = 0;
    PAYTOSCRIPTHASH = 1;
} 

// Reset device's internal state
//
// Response: Features
message Initialize {
    required string session_id = 1; // Any value identifying current connection, will be echoed back in Features message
}

// Response object for Initialize. Contains list of available features on the device.
message Features {
    required string session_id = 1;	// Echoed back from Initialize message
    optional string vendor = 2;	// Name of the manufacturer, e.g. "bitkey" 
    optional uint32 major_version = 3; // Major version of the device, e.g. 1
    optional uint32 minor_version = 4;  // Minor version of the device, e.g. 0
    optional bool otp = 5;	// True when device will send OtpRequest on important action
    optional bool pin = 6;	// True when device will send PinRequest on important action
    optional bool spv = 7;	// True when device requires SPV verification of transaction inputs
    optional uint64 maxfee_kb = 8;	// Maximum accepted fee per kilobyte of signed transaction 
    repeated Algorithm algo = 9;	// List of key generation algorithms supported by the device
    optional bool debug_link = 10;	// Indicates support for DebugLink connection  
}

// Test if device is live, device will send back the message on success
//
// Response: None or Success
message Ping {
    optional string message = 1;	// Message will be sent back in Success message
}

// Virtually "press" the button on the device.
// Message is available only on debugging connection and device must support "debug_link" feature.
//
// Response: Success  
message DebugLinkDecision {
	required bool yes_no = 1;	// True for "confirm", False for "cancel"
}

// Response object defining success of the previous request
message Success {
    optional string message = 1;	//	May contain human readable description of the action or request-specific payload
}

// Response object defining failure of the previous request
message Failure {
    optional int32 code = 1;		// May contain computer-readable definition of the error state
    optional string message = 2;	// May contain human-readable message of the error state
}

// Ask device for unique identifier.
//
// Response: UUID 
message GetUUID {
}

// Identifier of the device. This identifier must be composed from CPU serial number
// or other persistent source and must be the same for consecutive requests.
message UUID {
    required bytes UUID = 1;
}

// Message can be sent by the *device* as a response to any request.
// Message asks computer to send back OtpAck with the password printed on the device's display.
//
// Response: OtpAck, OtpCancel
message OtpRequest {
   optional string message = 1;	// Human readable message
}

// Message is sent by the computer as a response to OtpRequest previously sent by the device.
message OtpAck {
    required string otp = 1;	// User must be asked for the otp, which is displayed on the device's display
}

// Message is sent as a response to OtpRequest by the computer, asking the device to cancel
// pending action and reset to the default state.
message OtpCancel {
}

// Message can be sent by the *device* as a response to any request.
// Message asks computer to send back PinAck with the password associated with the device.
//
// Response: PinAck, PinCancel
message PinRequest {
   optional string message = 1;	// Human readable message
}

// Message is sent by the computer as a response to PinRequest previously sent by the device.
message PinAck {
    required string pin = 1;	// User must write down the password for accessing the device.
}

// Message is sent as a response to PinRequest by the computer, asking the device to cancel
// pending action and reset to the default state.
message PinCancel {
}

// Request a sample of random data generated by hardware RNG. May be used
// for tests of internal RNG.
//
// Response: OtpRequest, PinRequest, Entropy, Failure
message GetEntropy {
    required uint32 size = 1;	// Size of randomly generated buffer
}

// Response to GetEntropy request contains random data generated by internal HRNG.
message Entropy {
    required bytes entropy = 1;	// Stream of generated bytes
}

// Set maximum allowed fee per kB of transaction. This is used by internal sanity checking
// in SignTx method. Transaction won't be signed if requested transaction fees are above
// current value.
//
// Response: Success, OtpRequest, PinRequest, Failure
message SetMaxFeeKb {
	required uint64 maxfee_kb= 1;	// Maximum allowed transaction fee in satoshis per kB
}

// Ask device for it's current master public key. This may be used for generating
// public keys on the computer independently to the device. API doesn't provide
// any other way how to get bitcoin addresses from the device.
//
// Response: MasterPublicKey, Failure
message GetMasterPublicKey {
    required Algorithm algo = 1 [default=BIP32]; // Used algorithm for generating master public key
}

// Contains master public key derived from device's seed.
message MasterPublicKey {
    required bytes key = 1;	// master public key of requested algorithm in binary format
}

// Load seed and related internal settings from computer to the device. Existing seed is overwritten.
//
// Response: Success, OtpRequest, PinRequest, Failure
message LoadDevice {
    required string seed = 1;	// Seed encoded as a mnemonic (12 english words)
    optional bool otp = 2 [default=true];	// Enable OTP for important actions?
    optional string pin = 3;				// Set PIN protection for important actions
    optional bool spv = 4 [default=true];	// Enable SPV verification for transaction inputs (if available on device)
}

// Request device to do full-reset, to generate new seed
// and ask user for new settings (OTP, PIN, SPV).
// 
// Response: Success, OtpRequest, PinRequest, Failure
message ResetDevice {
	optional bytes random = 7;	// Provide additional entropy for seed generation function. Recommended to provide 256 bytes of random data.
}

// Data structure describes transaction output for SignTx message.
message TxOutput {
    required string address = 1;		// Target bitcoin address in base58 encoding
    repeated uint32 address_n = 2;		// Has higher priority than "address". If the output is to myself, specify parameter for address generation algorithm.
    required uint64 amount = 3;			// Amount to send in satoshis
    required ScriptType script_type = 4;// Select output script type
    repeated bytes script_args = 5;		// Provide additional parameters for the script (its script-depended)
}

// Data structure describes transaction output for SignTx and SignInput message
message TxInput {
    repeated uint32 address_n = 1;	// Parameter for address generation algorithm to derive the address from the master public key
    required uint64 amount = 2;		// Amount to spend in satoshis. The rest will be used for transaction fees
    required bytes prev_hash = 3;	// Hash of previous transaction spent by this input
    required uint32 prev_index = 4;	// Index of previous spent output
    optional bytes script_sig = 5;	// Script signature
}

// Request the device to sign the transaction
//
// Response: SignedTx, Success, OtpRequest, PinRequest, Failure
message SignTx {
    required Algorithm algo = 1 [default=BIP32];	// Algorithm using for key generation algorithm
    optional bool stream = 2; 			// Turn on input streaming (supports huge spending transactions)
    required uint64 fee = 3;			// Expected transaction fee in satoshis (used for cross-check with fees calculated from tx inputs)
    repeated TxOutput outputs = 4;		// List of TxOutput objects
    repeated TxInput inputs = 5;		// Used if streaming is disabled, list of TxInput objects 
    optional uint32 inputs_count = 6; // Used if streaming is enabled, count of input transactions to be streamed
    optional bytes random = 7; // Provide additional entropy for signing function. Recommended to provide 256 bytes of random data.
}

// Response to SignTx message
message SignedTx {
   repeated bytes signature = 1;	// List of signed inputs
}

/*
inputs = [] # list of TxInput
for i in inputs:
    for x in inputs:
        send(x)
        
	signature = send(SignInput(i))
*/

// Pass transaction input to the device. Computer must call SignTx with stream=true before sending
// inputs to the device.
//
// Response: Success, SignedInput, Failure
message SignInput {
	required TxInput input = 1;		// TxInput object
}

// Response to SignInput, contains signed input
message SignedInput {
	required bytes signature = 1;	// Signed input
}